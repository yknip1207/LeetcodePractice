/***
	 * 用另一個btTable做back tracking
	 * lcsTable[i][j] 紀錄從s1的第0~i的index 與 s2的第0~j的index，兩者的LCS長度
	 * @param str1
	 * @param str2
	 * @return
	 */
	public static String longestCommonSubsequenceWithBackTracking(String str1, String str2){
		String LCS = "";
		if(str1.equals("") || str2.equals(""))
			return LCS;
		int str1Len = str1.length();
		int str2Len = str2.length();
		char[] s1 = new char[str1Len+1];
		char[] s2 = new char[str2Len+1];
		int[][] lcsTable = new int[str1Len+1][str2Len+1];
		String[][] btTable = new String[str1Len+1][str2Len+1];
		s1[0] = '0';
		s2[0] = '0';
		for(int i = 1; i < str1Len+1; i++)
			s1[i] = str1.charAt(i-1);
		
		for(int i = 1; i < str2Len+1; i++)
			s2[i] = str2.charAt(i-1);		
		
		for(int i = 1; i < s1.length; i++){
			for(int j = 1; j < s2.length; j++){
				if(s1[i] == s2[j]){
					//LCS從左上方來再加上e1
					lcsTable[i][j] = lcsTable[i-1][j-1] + 1;
					btTable[i][j] = "upper-left";
				}
				else{
					//LCS(s1, sub2)長度 > LCS(sub1, s2)長度
					if(lcsTable[i][j-1] > lcsTable[i-1][j]){
						//LCS從左邊來
						lcsTable[i][j] = lcsTable[i][j-1];
						btTable[i][j] = "left";
					}else{
						//LCS從上面來
						lcsTable[i][j] = lcsTable[i-1][j];
						btTable[i][j] = "upper";
					}
				}
			}
		}
		
		int i = s1.length-1;
		int j = s2.length-1;
		while(i>0 && j>0){
//			System.out.println("btTable["+i+"]["+j+"]=" + btTable[i][j]);
			if(btTable[i][j].equals("upper-left")){
//				System.out.print("LCS'="+LCS+" + "+s1[i] + "=");
				LCS = s1[i] + LCS;
//				System.out.println(LCS);
				i--;
				j--;
//				System.out.println("i-- = "+i +" j-- ="+j);
			}
			else if(btTable[i][j].equals("upper")){	
				i--;
//				System.out.println("i-- = "+i);
			}
			else if(btTable[i][j].equals("left")){
				j--;
//				System.out.println("j-- = "+j);
			}
		}	
		return LCS;
	}
